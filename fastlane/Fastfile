# Fastfile for MirrorSmokerStopper
# Automated Screenshot Generation and App Store Deployment

default_platform(:ios)

platform :ios do
  
  # Automated Screenshot Generation
  desc "Generate screenshots for all device types and languages"
  lane :screenshots do
    capture_screenshots(
      project: "MirrorSmokerStopper.xcodeproj",
      scheme: "MirrorSmokerStopper",
      test_target_name: "MirrorSmokerStopperUITests",
      output_directory: "./fastlane/screenshots",
      clear_previous_screenshots: true,
      override_status_bar: true,
      devices: [
        "iPhone 16 Pro Max",
        "iPhone 16 Pro",
        "iPhone 16",
        "iPad Pro 11-inch (M4)",
        "iPad Pro 13-inch (M4)"
      ],
      languages: [
        "en-US",
        "es-ES", 
        "fr-FR",
        "de-DE",
        "it"
      ],
      launch_arguments: [
        "-FASTLANE_SNAPSHOT YES",
        "-ui_testing",
        "SCREENSHOT_MODE"
      ]
    )
  end
  
  # Quick Screenshots (English only, iPhone 15 Pro Max)
  desc "Generate screenshots quickly for development"
  lane :screenshots_quick do
    capture_screenshots(
      project: "MirrorSmokerStopper.xcodeproj", 
      scheme: "MirrorSmokerStopper",
      test_target_name: "MirrorSmokerStopperUITests",
      output_directory: "./fastlane/screenshots",
      clear_previous_screenshots: true,
      override_status_bar: true,
      devices: [
        "iPhone 16 Pro Max"
      ],
      languages: [
        "en-US"
      ],
      launch_arguments: [
        "-FASTLANE_SNAPSHOT YES", 
        "-ui_testing",
        "SCREENSHOT_MODE"
      ]
    )
  end
  
  # Generate Screenshots and Deliver to App Store Connect
  desc "Generate screenshots and upload to App Store Connect"
  lane :screenshots_and_upload do
    screenshots
    
    deliver(
      screenshots_path: "./fastlane/screenshots",
      skip_binary_upload: true,
      skip_metadata: true,
      force: true
    )
  end
  
  # Upload App Store Metadata Only
  desc "Upload metadata and screenshots to App Store Connect"
  lane :upload_metadata do
    deliver(
      skip_binary_upload: true,
      skip_screenshots: true,  # Skip screenshots for now
      force: true
    )
  end
  
  # Complete App Store submission without screenshots
  desc "Complete App Store submission ready for review - builds, uploads binary and metadata"
  lane :submit_for_review do
    # Ensure we're on the right branch and up to date
    ensure_git_status_clean
    ensure_git_branch(branch: "master")
    
    # Setup code signing with Fastlane Match
    match(
      type: "appstore",
      app_identifier: [
        "com.mirror-labs.MirrorSmokerStopper",
        "com.mirror-labs.MirrorSmokerStopper.watchkitapp", 
        "com.mirror-labs.MirrorSmokerStopper.HomeWidget"
      ]
    )
    
    # Set explicit version number for App Store submission
    increment_version_number(
      version_number: "1.0.1",
      xcodeproj: "MirrorSmokerStopper.xcodeproj"
    )
    
    # Build the app with automatic code signing
    build_app(
      project: "MirrorSmokerStopper.xcodeproj",
      scheme: "MirrorSmokerStopper", 
      clean: true,
      export_method: "app-store",
      codesigning_identity: "Apple Distribution",
      export_options: {
        provisioningProfiles: {
          "com.mirror-labs.MirrorSmokerStopper" => "match AppStore com.mirror-labs.MirrorSmokerStopper",
          "com.mirror-labs.MirrorSmokerStopper.watchkitapp" => "match AppStore com.mirror-labs.MirrorSmokerStopper.watchkitapp",
          "com.mirror-labs.MirrorSmokerStopper.HomeWidget" => "match AppStore com.mirror-labs.MirrorSmokerStopper.HomeWidget"
        }
      }
    )
    
    # Upload metadata first
    deliver(
      skip_binary_upload: true,
      skip_screenshots: true,
      submit_for_review: false,
      force: true
    )
    
    # Upload binary
    deliver(
      skip_metadata: true,
      skip_screenshots: true,
      submit_for_review: true,
      automatic_release: false,
      force: true
    )
    
    # Commit version bump
    commit_version_bump(
      message: "Version bump for App Store submission",
      xcodeproj: "MirrorSmokerStopper.xcodeproj"
    )
    
    # Tag the release
    add_git_tag(
      tag: "v1.0.1"
    )
    
    # Push changes
    push_to_git_remote
  end
  
  # Build and Test (useful for CI/CD)
  desc "Run tests and build the app"
  lane :test do
    scan(
      project: "MirrorSmokerStopper.xcodeproj",
      scheme: "MirrorSmokerStopper",
      device: "iPhone 16 Pro Max",
      clean: true
    )
  end
  
  # Beta deployment to TestFlight
  desc "Build and upload to TestFlight"
  lane :beta do
    # Ensure we're on the right branch and up to date
    ensure_git_status_clean
    
    # Increment build number
    increment_build_number(
      xcodeproj: "MirrorSmokerStopper.xcodeproj"
    )
    
    # Build the app
    build_app(
      project: "MirrorSmokerStopper.xcodeproj",
      scheme: "MirrorSmokerStopper",
      clean: true,
      export_method: "app-store"
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )
    
    # Commit version bump
    commit_version_bump(
      message: "Version bump for TestFlight build",
      xcodeproj: "MirrorSmokerStopper.xcodeproj"
    )
  end
  
  # Full App Store Release
  desc "Build and release to App Store"
  lane :release do
    # Ensure we're on the right branch and up to date
    ensure_git_status_clean
    ensure_git_branch(branch: "master")
    
    # Increment version number
    increment_version_number(
      xcodeproj: "MirrorSmokerStopper.xcodeproj"
    )
    
    # Generate fresh screenshots
    screenshots
    
    # Build the app
    build_app(
      project: "MirrorSmokerStopper.xcodeproj",
      scheme: "MirrorSmokerStopper", 
      clean: true,
      export_method: "app-store"
    )
    
    # Upload to App Store Connect
    deliver(
      force: true,
      screenshots_path: "./fastlane/screenshots"
    )
    
    # Commit version bump
    commit_version_bump(
      message: "Version bump for App Store release",
      xcodeproj: "MirrorSmokerStopper.xcodeproj"
    )
    
    # Tag the release
    add_git_tag(
      tag: get_version_number(xcodeproj: "MirrorSmokerStopper.xcodeproj")
    )
    
    # Push changes
    push_to_git_remote
  end
  
  # Clean up old screenshots and builds
  desc "Clean up build artifacts and old screenshots"
  lane :cleanup do
    clean_build_artifacts
    
    # Remove old screenshots (keep last 3 sets)
    Dir.glob("./fastlane/screenshots/*/").sort_by { |f| File.mtime(f) }.reverse[3..-1]&.each do |dir|
      FileUtils.rm_rf(dir)
    end
  end
  
  # Error handling
  error do |lane, exception|
    slack(
      message: "❌ Fastlane failed in lane: #{lane}",
      payload: { "Error" => exception.to_s },
      default_payloads: [:git_branch, :git_author]
    ) if ENV["SLACK_URL"]
  end
end